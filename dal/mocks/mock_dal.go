// Code generated by MockGen. DO NOT EDIT.
// Source: ./dal/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/csguojin/reserve/model"
	gomock "github.com/golang/mock/gomock"
)

// MockDal is a mock of Dal interface.
type MockDal struct {
	ctrl     *gomock.Controller
	recorder *MockDalMockRecorder
}

// MockDalMockRecorder is the mock recorder for MockDal.
type MockDalMockRecorder struct {
	mock *MockDal
}

// NewMockDal creates a new mock instance.
func NewMockDal(ctrl *gomock.Controller) *MockDal {
	mock := &MockDal{ctrl: ctrl}
	mock.recorder = &MockDalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDal) EXPECT() *MockDalMockRecorder {
	return m.recorder
}

// CeateAdmin mocks base method.
func (m *MockDal) CeateAdmin(admin *model.Admin) (*model.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CeateAdmin", admin)
	ret0, _ := ret[0].(*model.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CeateAdmin indicates an expected call of CeateAdmin.
func (mr *MockDalMockRecorder) CeateAdmin(admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CeateAdmin", reflect.TypeOf((*MockDal)(nil).CeateAdmin), admin)
}

// CeateUser mocks base method.
func (m *MockDal) CeateUser(user *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CeateUser", user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CeateUser indicates an expected call of CeateUser.
func (mr *MockDalMockRecorder) CeateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CeateUser", reflect.TypeOf((*MockDal)(nil).CeateUser), user)
}

// CreateResv mocks base method.
func (m *MockDal) CreateResv(resv *model.Resv) (*model.Resv, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResv", resv)
	ret0, _ := ret[0].(*model.Resv)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResv indicates an expected call of CreateResv.
func (mr *MockDalMockRecorder) CreateResv(resv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResv", reflect.TypeOf((*MockDal)(nil).CreateResv), resv)
}

// CreateRoom mocks base method.
func (m *MockDal) CreateRoom(room *model.Room) (*model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", room)
	ret0, _ := ret[0].(*model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockDalMockRecorder) CreateRoom(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockDal)(nil).CreateRoom), room)
}

// CreateSeat mocks base method.
func (m *MockDal) CreateSeat(seat *model.Seat) (*model.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeat", seat)
	ret0, _ := ret[0].(*model.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSeat indicates an expected call of CreateSeat.
func (mr *MockDalMockRecorder) CreateSeat(seat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeat", reflect.TypeOf((*MockDal)(nil).CreateSeat), seat)
}

// DeleteAdmin mocks base method.
func (m *MockDal) DeleteAdmin(adminID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdmin", adminID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdmin indicates an expected call of DeleteAdmin.
func (mr *MockDalMockRecorder) DeleteAdmin(adminID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdmin", reflect.TypeOf((*MockDal)(nil).DeleteAdmin), adminID)
}

// DeleteRoom mocks base method.
func (m *MockDal) DeleteRoom(roomID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoom indicates an expected call of DeleteRoom.
func (mr *MockDalMockRecorder) DeleteRoom(roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockDal)(nil).DeleteRoom), roomID)
}

// DeleteSeat mocks base method.
func (m *MockDal) DeleteSeat(seatID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeat", seatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeat indicates an expected call of DeleteSeat.
func (mr *MockDalMockRecorder) DeleteSeat(seatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeat", reflect.TypeOf((*MockDal)(nil).DeleteSeat), seatID)
}

// DeleteUser mocks base method.
func (m *MockDal) DeleteUser(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDalMockRecorder) DeleteUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDal)(nil).DeleteUser), userID)
}

// GetAdmin mocks base method.
func (m *MockDal) GetAdmin(id int) (*model.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdmin", id)
	ret0, _ := ret[0].(*model.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdmin indicates an expected call of GetAdmin.
func (mr *MockDalMockRecorder) GetAdmin(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmin", reflect.TypeOf((*MockDal)(nil).GetAdmin), id)
}

// GetAdminByName mocks base method.
func (m *MockDal) GetAdminByName(name string) (*model.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminByName", name)
	ret0, _ := ret[0].(*model.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminByName indicates an expected call of GetAdminByName.
func (mr *MockDalMockRecorder) GetAdminByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminByName", reflect.TypeOf((*MockDal)(nil).GetAdminByName), name)
}

// GetAdminWithPasswordByName mocks base method.
func (m *MockDal) GetAdminWithPasswordByName(name string) (*model.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminWithPasswordByName", name)
	ret0, _ := ret[0].(*model.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminWithPasswordByName indicates an expected call of GetAdminWithPasswordByName.
func (mr *MockDalMockRecorder) GetAdminWithPasswordByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminWithPasswordByName", reflect.TypeOf((*MockDal)(nil).GetAdminWithPasswordByName), name)
}

// GetAllAdmins mocks base method.
func (m *MockDal) GetAllAdmins() ([]*model.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAdmins")
	ret0, _ := ret[0].([]*model.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAdmins indicates an expected call of GetAllAdmins.
func (mr *MockDalMockRecorder) GetAllAdmins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAdmins", reflect.TypeOf((*MockDal)(nil).GetAllAdmins))
}

// GetAllRooms mocks base method.
func (m *MockDal) GetAllRooms() ([]*model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRooms")
	ret0, _ := ret[0].([]*model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRooms indicates an expected call of GetAllRooms.
func (mr *MockDalMockRecorder) GetAllRooms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRooms", reflect.TypeOf((*MockDal)(nil).GetAllRooms))
}

// GetAllSeats mocks base method.
func (m *MockDal) GetAllSeats(roomID int) ([]*model.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSeats", roomID)
	ret0, _ := ret[0].([]*model.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSeats indicates an expected call of GetAllSeats.
func (mr *MockDalMockRecorder) GetAllSeats(roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSeats", reflect.TypeOf((*MockDal)(nil).GetAllSeats), roomID)
}

// GetAllUsers mocks base method.
func (m *MockDal) GetAllUsers() ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockDalMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockDal)(nil).GetAllUsers))
}

// GetResv mocks base method.
func (m *MockDal) GetResv(resvID int) (*model.Resv, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResv", resvID)
	ret0, _ := ret[0].(*model.Resv)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResv indicates an expected call of GetResv.
func (mr *MockDalMockRecorder) GetResv(resvID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResv", reflect.TypeOf((*MockDal)(nil).GetResv), resvID)
}

// GetResvsBySeat mocks base method.
func (m *MockDal) GetResvsBySeat(seatID int) ([]*model.Resv, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResvsBySeat", seatID)
	ret0, _ := ret[0].([]*model.Resv)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResvsBySeat indicates an expected call of GetResvsBySeat.
func (mr *MockDalMockRecorder) GetResvsBySeat(seatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResvsBySeat", reflect.TypeOf((*MockDal)(nil).GetResvsBySeat), seatID)
}

// GetResvsByUser mocks base method.
func (m *MockDal) GetResvsByUser(userID int) ([]*model.Resv, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResvsByUser", userID)
	ret0, _ := ret[0].([]*model.Resv)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResvsByUser indicates an expected call of GetResvsByUser.
func (mr *MockDalMockRecorder) GetResvsByUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResvsByUser", reflect.TypeOf((*MockDal)(nil).GetResvsByUser), userID)
}

// GetRoom mocks base method.
func (m *MockDal) GetRoom(id int) (*model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoom", id)
	ret0, _ := ret[0].(*model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoom indicates an expected call of GetRoom.
func (mr *MockDalMockRecorder) GetRoom(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoom", reflect.TypeOf((*MockDal)(nil).GetRoom), id)
}

// GetSeat mocks base method.
func (m *MockDal) GetSeat(id int) (*model.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeat", id)
	ret0, _ := ret[0].(*model.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeat indicates an expected call of GetSeat.
func (mr *MockDalMockRecorder) GetSeat(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeat", reflect.TypeOf((*MockDal)(nil).GetSeat), id)
}

// GetUser mocks base method.
func (m *MockDal) GetUser(id int) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDalMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDal)(nil).GetUser), id)
}

// GetUserByName mocks base method.
func (m *MockDal) GetUserByName(username string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", username)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockDalMockRecorder) GetUserByName(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockDal)(nil).GetUserByName), username)
}

// GetUserWithPasswordByName mocks base method.
func (m *MockDal) GetUserWithPasswordByName(username string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithPasswordByName", username)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithPasswordByName indicates an expected call of GetUserWithPasswordByName.
func (mr *MockDalMockRecorder) GetUserWithPasswordByName(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithPasswordByName", reflect.TypeOf((*MockDal)(nil).GetUserWithPasswordByName), username)
}

// UpdateResvStatus mocks base method.
func (m *MockDal) UpdateResvStatus(resv *model.Resv) (*model.Resv, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResvStatus", resv)
	ret0, _ := ret[0].(*model.Resv)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResvStatus indicates an expected call of UpdateResvStatus.
func (mr *MockDalMockRecorder) UpdateResvStatus(resv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResvStatus", reflect.TypeOf((*MockDal)(nil).UpdateResvStatus), resv)
}

// UpdateRoom mocks base method.
func (m *MockDal) UpdateRoom(room *model.Room) (*model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoom", room)
	ret0, _ := ret[0].(*model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoom indicates an expected call of UpdateRoom.
func (mr *MockDalMockRecorder) UpdateRoom(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoom", reflect.TypeOf((*MockDal)(nil).UpdateRoom), room)
}

// UpdateSeat mocks base method.
func (m *MockDal) UpdateSeat(seat *model.Seat) (*model.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeat", seat)
	ret0, _ := ret[0].(*model.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSeat indicates an expected call of UpdateSeat.
func (mr *MockDalMockRecorder) UpdateSeat(seat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeat", reflect.TypeOf((*MockDal)(nil).UpdateSeat), seat)
}

// UpdateUser mocks base method.
func (m *MockDal) UpdateUser(user *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDalMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDal)(nil).UpdateUser), user)
}
